#!python3
"""
/***************************************************************************
 FireToolbox
                                 A QGIS plugin
 A collection of fire insights related algorithms
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-08-30
        copyright            : (C) 2024 by Diego Theran - Fire2a.com
        email                : FIX-ME
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from pathlib import Path
from tempfile import NamedTemporaryFile

import processing
from qgis.core import (QgsProcessing, QgsProcessingAlgorithm, QgsProcessingParameterMultipleLayers,
                       QgsProcessingParameterRasterDestination, QgsProject)
from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon

from .algorithm_utils import write_log


class FireScarMapper(QgsProcessingAlgorithm):
    IN_BEFORE = "BeforeRasters"
    IN_BURNT = "BurntRasters"
    OUT_SCARS = "OutputScars"

    def initAlgorithm(self, config):
        self.addParameter(
            QgsProcessingParameterMultipleLayers(
                name=self.IN_BEFORE,
                description=self.tr("Input rasters of non burned landscape"),
                layerType=QgsProcessing.TypeRaster,
                defaultValue=[QgsProcessing.TypeRaster],
                optional=False,
            )
        )
        self.addParameter(
            QgsProcessingParameterMultipleLayers(
                name=self.IN_BURNT,
                description=self.tr("Input rasters of burnt landscape"),
                layerType=QgsProcessing.TypeRaster,
                defaultValue=[QgsProcessing.TypeRaster],
                optional=False,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                name=self.OUT_SCARS,
                description=self.tr("Output mapped scars in a single raster"),
                # defaultValue=None,
                # optional=False,
                # createByDefault=True,
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        before_raster_list = self.parameterAsLayerList(parameters, self.IN_BEFORE, context)
        feedback.pushDebugInfo(
            f"Input rasters:\n names: {[ r.name() for r in before_raster_list]}\ntypes:"
            f" {[ r.rasterType() for r in before_raster_list]}"
        )
        burnt_raster_list = self.parameterAsLayerList(parameters, self.IN_BURNT, context)
        feedback.pushDebugInfo(
            f"Input rasters:\n names: {[ r.name() for r in burnt_raster_list]}\ntypes:"
            f" {[ r.rasterType() for r in burnt_raster_list]}"
        )
        return {}

    def name(self):
        return "firescarmapper"

    def displayName(self):
        return self.tr("Fire Scar Mapper")

    def tr(self, string):
        return QCoreApplication.translate("Processing", string)

    def createInstance(self):
        return FireScarMapper()
