# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Fire2aSimulatorDialog
                                 A QGIS plugin
 Simulate wildfires, forestfires easily. Check your landscape plan valuation under multiple fire scenarios and get insightful risk metrics, analytics and more! From a combustion layer, to crown fire, weather behavior, etc.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-09-06
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Fernando Badilla Veliz - Fire2a
        email                : fbadilla@ing.uchile.cl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsMessageLog

from qgis.PyQt.QtCore import Qt

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'cell2fire2asimulator_dialog_base.ui'))


class Fire2aSimulatorDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(Fire2aSimulatorDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        # explore = { o.objectName(): o.enabled() for o in self.findChildren(QtWidgets, options=Qt.FindChildrenRecursively) }
        # QgsMessageLog.logMessage(f"Explore {explore}", "Fire2aSimulatorDialog")
        self.setup_widgets()
        self.setup_callbacks()

    def setup_widgets(self):
        self.comboBox.addItems(["Scott & Burgan", "Kitral", "3"])

    def setup_callbacks(self):
        self.comboBox.currentIndexChanged.connect(self.fuel_model_callback)
        self.comboBox.setCurrentIndex(0)

    def fuel_model_callback(self, index):
        QgsMessageLog.logMessage(f"Fuel model callback index:{index}", "Fire2aSimulatorDialog")
        if index == 0:
            self.tab_2.setEnabled(True)
            self.tab_3.setEnabled(False)
        if index == 1:
            self.tab_3.setEnabled(True)
            self.tab_2.setEnabled(False)

